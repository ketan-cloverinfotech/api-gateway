# This workflow provides a safe and user-friendly way to roll back to a specific Git tag.
#
# --- HOW IT WORKS (IMPORTANT!) ---
# This process requires TWO workflow runs due to GitHub Actions limitations.
#
# RUN 1: VIEW THE TAGS
#   - Run the workflow. The first job will show you a list of all available tags in its summary.
#   - Copy the EXACT tag name you want to roll back to.
#
# RUN 2: PERFORM THE ROLLBACK
#   - Run the workflow AGAIN.
#   - Paste the tag you copied into the "Target Tag" input box.
#   - The second job will now PAUSE and wait for your manual approval before running.
#
# --- MANDATORY ONE-TIME SETUP ---
# For the pause/approval step to work, you MUST configure an "Environment" in your repository:
#   1. Go to your repo's Settings > Environments > New environment.
#   2. Name the environment "Rollback" (must match exactly).
#   3. Add a protection rule: Check "Required reviewers" and add yourself or your team.
#   4. Save the rule.

name: Tag Rollback Workflow

on:
  workflow_dispatch:
    inputs:
      target_tag:
        description: 'RUN 1: Leave blank. RUN 2: Paste the tag you want to roll back to.'
        required: false # Not required for the first run
        type: string

jobs:
  # JOB 1: LISTS ALL AVAILABLE TAGS
  # This job's purpose is purely informational. It helps you find the correct tag name.
  list_tags:
    name: "Step 1: View Available Tags"
    runs-on: ubuntu-latest
    steps:
      - name: "Check out repository code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history to get all tags

      - name: "Display available tags in job summary"
        run: |
          echo "## 🏷️ Available Tags for Rollback" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Instructions" >> $GITHUB_STEP_SUMMARY
          echo "1. **Copy the exact tag** you want to roll back to from the list below." >> $GITHUB_STEP_SUMMARY
          echo "2. **Re-run this workflow**." >> $GITHUB_STEP_SUMMARY
          echo "3. **Paste the tag** into the 'Target Tag' input field to start the rollback." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git tag --sort=-creatordate >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # JOB 2: PERFORMS THE ROLLBACK AFTER MANUAL APPROVAL
  # This job only runs if a target_tag is provided. It will PAUSE for approval.
  perform_rollback:
    name: "Step 2: Manually Approve and Perform Rollback"
    needs: list_tags # This job runs after list_tags.
    
    # This condition ensures this job only attempts to run if you've provided a tag.
    if: github.event.inputs.target_tag != ''

    # This is the key for pausing the workflow. It requires the "Rollback" environment to be configured.
    environment: Rollback

    runs-on: ubuntu-latest
    steps:
      - name: "Check out repository code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Verify that the specified tag exists"
        run: |
          echo "Attempting to roll back to tag: ${{ github.event.inputs.target_tag }}"
          if ! git show-ref --tags "${{ github.event.inputs.target_tag }}"; then
            echo "::error::Tag '${{ github.event.inputs.target_tag }}' does not exist in the repository!"
            exit 1
          fi
          echo "✅ Tag '${{ github.event.inputs.target_tag }}' found and verified."

      - name: "Execute Rollback Commands"
        run: |
          # --- ADD YOUR ACTUAL ROLLBACK LOGIC HERE ---
          # This is where you would put your commands to perform the rollback.
          # For example, you might check out the tag and then run a deployment script.
          echo "Executing rollback for tag: ${{ github.event.inputs.target_tag }}"
          #
          # EXAMPLE COMMANDS:
          # git checkout ${{ github.event.inputs.target_tag }}
          # ./scripts/deploy-to-production.sh --force
          
          echo "✅ Simulation of rollback to ${{ github.event.inputs.target_tag }} is complete."
